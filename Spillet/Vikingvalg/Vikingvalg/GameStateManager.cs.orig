using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;


namespace Vikingvalg
{
    /// <summary>
    /// This is a game component that implements IUpdateable.
    /// </summary>
    public class GameStateManager : Microsoft.Xna.Framework.GameComponent, IManageStates
    {
        private String gameState;

        MenuManager menuService;
        InGameManager inGameService;

        public GameStateManager(Game game)
            : base(game)
        {
            DrawableGameComponent spriteManager = new SpriteManager(game);
            Game.Components.Add(spriteManager);
            Game.Services.AddService(typeof(IManageSprites), spriteManager);

            GameComponent inputManager = new InputManager(game);
            Game.Components.Add(inputManager);
            Game.Services.AddService(typeof(IManageInput), inputManager);

            GameComponent menuManager = new MenuManager(game);
            Game.Components.Add(menuManager);
            Game.Services.AddService(typeof(MenuManager), menuManager);

            GameComponent inGameManager = new InGameManager(game);
            Game.Components.Add(inGameManager);
            Game.Services.AddService(typeof(InGameManager), inGameManager);
        }

        /// <summary>
        /// Allows the game component to perform any initialization it needs to before starting
        /// to run.  This is where it can query for any required services and load content.
        /// </summary>
        public override void Initialize()
        {
            inGameService = (InGameManager)Game.Services.GetService(typeof(InGameManager));
            menuService = (MenuManager)Game.Services.GetService(typeof(MenuManager));

<<<<<<< HEAD
            Player p1 = new Player(new Rectangle(200, 200, 150, 192));
            renderService.AddDrawable((Sprite)p1);

            Enemy e1 = new Enemy(new Vector2(300, 200));
            renderService.AddDrawable((Sprite)e1);
            Enemy e2 = new Enemy(new Vector2(700, 300));
            renderService.AddDrawable((Sprite)e2);
=======
            gameState = "StartMenu";
            base.Initialize();
>>>>>>> fa56d5c40d7d5de37cee54014c531bfa1d93cda6
        }

        /// <summary>
        /// Allows the game component to update itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        public override void Update(GameTime gameTime)
        {
            switch (gameState)
            {
                case "StartMenu":
                    menuService.Enabled = false;
                    menuService.Visible = false;
                    inGameService.Visible = true;
                    inGameService.Enabled = true;
                    break;
                case "InGame":
                    inGameService.Visible = true;
                    inGameService.Enabled = true;
                    menuService.Enabled = false;
                    menuService.Visible = false;
                    break;
            }
            base.Update(gameTime);
        }

        public void ChangeState()
        {
        }
    }
}
